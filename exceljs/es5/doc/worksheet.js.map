{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Image","Table","DataValidations","Encryptor","copyStyle","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","headerFooter","differentFirst","differentOddEven","oddHeader","oddFooter","evenHeader","evenFooter","firstHeader","firstFooter","dataValidations","views","autoFilter","_media","sheetProtection","tables","conditionalFormattings","removeWorksheetEx","dimensions","forEach","row","rowDims","expand","number","min","max","value","_headerRowCount","reduce","pv","cv","headerCount","headers","length","Math","count","columns","defn","column","push","key","f","each","c","col","l2n","n","start","rows","nRows","inserts","i","rowArguments","insert","getRow","splice","apply","r","nExpand","nKeep","nEnd","getColumn","definedNames","spliceColumns","columnCount","maxCount","eachRow","cellCount","counts","eachCell","_lastRowNumber","slice","style","rowNo","_nextRow","values","_setStyleOption","addRow","pos","spliceRows","findRow","_copyStyle","getRows","src","dest","styleEmpty","rSrc","rDst","includeEmpty","cell","colNumber","getCell","height","rowNum","Array","fill","nInserts","_value","constructor","cellToBeMerged","_row","_number","prevMaster","_master","newMaster","_column","merge","iteratee","hasValues","address","getAddress","findCell","getCellEx","cells","_mergeCellsInternal","ignoreStyle","intersects","Error","master","j","unmerge","some","Boolean","type","ValueType","Merge","_unMergeMaster","range","formula","results","shareType","decoded","decode","width","masterAddress","encodeAddress","isShared","getResult","isArray","first","ref","result","sharedFormula","imageId","model","filter","m","image","find","password","Promise","resolve","sheet","spinCount","Number","isFinite","round","algorithmName","saltValue","randomBytes","toString","hashValue","convertPasswordToHash","table","cf","Function","console","trace","tabColor","media","map","medium","cols","toModel","rowModel","merges","fromModel","_parseRows","_parseMergeCells","t","mergeCells","mergeCellsWithoutStyle","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../utils/under-dash');\r\n\r\nconst colCache = require('../utils/col-cache');\r\nconst Range = require('./range');\r\nconst Row = require('./row');\r\nconst Column = require('./column');\r\nconst Enums = require('./enums');\r\nconst Image = require('./image');\r\nconst Table = require('./table');\r\nconst DataValidations = require('./data-validations');\r\nconst Encryptor = require('../utils/encryptor');\r\nconst {copyStyle} = require('../utils/copy-style');\r\n\r\n// Worksheet requirements\r\n//  Operate as sheet inside workbook or standalone\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual cells\r\n//  Manage column widths and row heights\r\n\r\nclass Worksheet {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    // in a workbook, each sheet will have a number\r\n    this.id = options.id;\r\n    this.orderNo = options.orderNo;\r\n\r\n    // and a name\r\n    this.name = options.name || `Sheet${this.id}`;\r\n\r\n    // add a state\r\n    this.state = options.state || 'visible';\r\n\r\n    // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\r\n    // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\r\n    this._rows = [];\r\n\r\n    // column definitions\r\n    this._columns = null;\r\n\r\n    // column keys (addRow convenience): key ==> this._collumns index\r\n    this._keys = {};\r\n\r\n    // keep record of all merges\r\n    this._merges = {};\r\n\r\n    // record of all row and column pageBreaks\r\n    this.rowBreaks = [];\r\n\r\n    this._workbook = options.workbook;\r\n\r\n    // for tabColor, default row height, outline levels, etc\r\n    this.properties = Object.assign(\r\n      {},\r\n      {\r\n        defaultRowHeight: 15,\r\n        dyDescent: 55,\r\n        outlineLevelCol: 0,\r\n        outlineLevelRow: 0,\r\n      },\r\n      options.properties\r\n    );\r\n\r\n    // for all things printing\r\n    this.pageSetup = Object.assign(\r\n      {},\r\n      {\r\n        margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3},\r\n        orientation: 'portrait',\r\n        horizontalDpi: 4294967295,\r\n        verticalDpi: 4294967295,\r\n        fitToPage: !!(\r\n          options.pageSetup &&\r\n          (options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) &&\r\n          !options.pageSetup.scale\r\n        ),\r\n        pageOrder: 'downThenOver',\r\n        blackAndWhite: false,\r\n        draft: false,\r\n        cellComments: 'None',\r\n        errors: 'displayed',\r\n        scale: 100,\r\n        fitToWidth: 1,\r\n        fitToHeight: 1,\r\n        paperSize: undefined,\r\n        showRowColHeaders: false,\r\n        showGridLines: false,\r\n        firstPageNumber: undefined,\r\n        horizontalCentered: false,\r\n        verticalCentered: false,\r\n        rowBreaks: null,\r\n        colBreaks: null,\r\n      },\r\n      options.pageSetup\r\n    );\r\n\r\n    this.headerFooter = Object.assign(\r\n      {},\r\n      {\r\n        differentFirst: false,\r\n        differentOddEven: false,\r\n        oddHeader: null,\r\n        oddFooter: null,\r\n        evenHeader: null,\r\n        evenFooter: null,\r\n        firstHeader: null,\r\n        firstFooter: null,\r\n      },\r\n      options.headerFooter\r\n    );\r\n\r\n    this.dataValidations = new DataValidations();\r\n\r\n    // for freezepanes, split, zoom, gridlines, etc\r\n    this.views = options.views || [];\r\n\r\n    this.autoFilter = options.autoFilter || null;\r\n\r\n    // for images, etc\r\n    this._media = [];\r\n\r\n    // worksheet protection\r\n    this.sheetProtection = null;\r\n\r\n    // for tables\r\n    this.tables = {};\r\n\r\n    this.conditionalFormattings = [];\r\n  }\r\n\r\n  get workbook() {\r\n    return this._workbook;\r\n  }\r\n\r\n  // when you're done with this worksheet, call this to remove from workbook\r\n  destroy() {\r\n    this._workbook.removeWorksheetEx(this);\r\n  }\r\n\r\n  // Get the bounding range of the cells in this worksheet\r\n  get dimensions() {\r\n    const dimensions = new Range();\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        const rowDims = row.dimensions;\r\n        if (rowDims) {\r\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\r\n        }\r\n      }\r\n    });\r\n    return dimensions;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce((pv, cv) => {\r\n      const headerCount = (cv.header && 1) || (cv.headers && cv.headers.length) || 0;\r\n      return Math.max(pv, headerCount);\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    let count = 1;\r\n    const columns = (this._columns = []);\r\n    value.forEach(defn => {\r\n      const column = new Column(this, count++, false);\r\n      columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  }\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  }\r\n\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  }\r\n\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  }\r\n\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  }\r\n\r\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherwise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  }\r\n\r\n  spliceColumns(start, count, ...inserts) {\r\n    const rows = this._rows;\r\n    const nRows = rows.length;\r\n    if (inserts.length > 0) {\r\n      // must iterate over all rows whether they exist yet or not\r\n      for (let i = 0; i < nRows; i++) {\r\n        const rowArguments = [start, count];\r\n        // eslint-disable-next-line no-loop-func\r\n        inserts.forEach(insert => {\r\n          rowArguments.push(insert[i] || null);\r\n        });\r\n        const row = this.getRow(i + 1);\r\n        // eslint-disable-next-line prefer-spread\r\n        row.splice.apply(row, rowArguments);\r\n      }\r\n    } else {\r\n      // nothing to insert, so just splice all rows\r\n      this._rows.forEach(r => {\r\n        if (r) {\r\n          r.splice(start, count);\r\n        }\r\n      });\r\n    }\r\n\r\n    // splice column definitions\r\n    const nExpand = inserts.length - count;\r\n    const nKeep = start + count;\r\n    const nEnd = this._columns.length;\r\n    if (nExpand < 0) {\r\n      for (let i = start + inserts.length; i <= nEnd; i++) {\r\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\r\n      }\r\n    } else if (nExpand > 0) {\r\n      for (let i = nEnd; i >= nKeep; i--) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\r\n      }\r\n    }\r\n    for (let i = start; i < start + inserts.length; i++) {\r\n      this.getColumn(i).defn = null;\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);\r\n  }\r\n\r\n  get lastColumn() {\r\n    return this.getColumn(this.columnCount);\r\n  }\r\n\r\n  get columnCount() {\r\n    let maxCount = 0;\r\n    this.eachRow(row => {\r\n      maxCount = Math.max(maxCount, row.cellCount);\r\n    });\r\n    return maxCount;\r\n  }\r\n\r\n  get actualColumnCount() {\r\n    // performance nightmare - for each row, counts all the columns used\r\n    const counts = [];\r\n    let count = 0;\r\n    this.eachRow(row => {\r\n      row.eachCell(({col}) => {\r\n        if (!counts[col]) {\r\n          counts[col] = true;\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Rows\r\n\r\n  _commitRow() {\r\n    // nop - allows streaming reader to fill a document\r\n  }\r\n\r\n  get _lastRowNumber() {\r\n    // need to cope with results of splice\r\n    const rows = this._rows;\r\n    let n = rows.length;\r\n    while (n > 0 && rows[n - 1] === undefined) {\r\n      n--;\r\n    }\r\n    return n;\r\n  }\r\n\r\n  get _nextRow() {\r\n    return this._lastRowNumber + 1;\r\n  }\r\n\r\n  get lastRow() {\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length - 1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // find a row (if exists) by row number\r\n  findRow(r) {\r\n    return this._rows[r - 1];\r\n  }\r\n\r\n  // find multiple rows (if exists) by row number\r\n  findRows(start, length) {\r\n    return this._rows.slice(start - 1, start - 1 + length);\r\n  }\r\n\r\n  get rowCount() {\r\n    return this._lastRowNumber;\r\n  }\r\n\r\n  get actualRowCount() {\r\n    // counts actual rows that have actual data\r\n    let count = 0;\r\n    this.eachRow(() => {\r\n      count++;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // get a row by row number.\r\n  getRow(r) {\r\n    let row = this._rows[r - 1];\r\n    if (!row) {\r\n      row = this._rows[r - 1] = new Row(this, r);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  // get multiple rows by row number.\r\n  getRows(start, length) {\r\n    if (length < 1) return undefined;\r\n    const rows = [];\r\n    for (let i = start; i < start + length; i++) {\r\n      rows.push(this.getRow(i));\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  addRow(value, style = 'n') {\r\n    const rowNo = this._nextRow;\r\n    const row = this.getRow(rowNo);\r\n    row.values = value;\r\n    this._setStyleOption(rowNo, style[0] === 'i' ? style : 'n');\r\n    return row;\r\n  }\r\n\r\n  addRows(value, style = 'n') {\r\n    const rows = [];\r\n    value.forEach(row => {\r\n      rows.push(this.addRow(row, style));\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  insertRow(pos, value, style = 'n') {\r\n    this.spliceRows(pos, 0, value);\r\n    this._setStyleOption(pos, style);\r\n    return this.getRow(pos);\r\n  }\r\n\r\n  insertRows(pos, values, style = 'n') {\r\n    this.spliceRows(pos, 0, ...values);\r\n    if (style !== 'n') {\r\n      // copy over the styles\r\n      for (let i = 0; i < values.length; i++) {\r\n        if (style[0] === 'o' && this.findRow(values.length + pos + i) !== undefined) {\r\n          this._copyStyle(values.length + pos + i, pos + i, style[1] === '+');\r\n        } else if (style[0] === 'i' && this.findRow(pos - 1) !== undefined) {\r\n          this._copyStyle(pos - 1, pos + i, style[1] === '+');\r\n        }\r\n      }\r\n    }\r\n    return this.getRows(pos, values.length);\r\n  }\r\n\r\n  // set row at position to same style as of either pervious row (option 'i') or next row (option 'o')\r\n  _setStyleOption(pos, style = 'n') {\r\n    if (style[0] === 'o' && this.findRow(pos + 1) !== undefined) {\r\n      this._copyStyle(pos + 1, pos, style[1] === '+');\r\n    } else if (style[0] === 'i' && this.findRow(pos - 1) !== undefined) {\r\n      this._copyStyle(pos - 1, pos, style[1] === '+');\r\n    }\r\n  }\r\n\r\n  _copyStyle(src, dest, styleEmpty = false) {\r\n    const rSrc = this.getRow(src);\r\n    const rDst = this.getRow(dest);\r\n    rDst.style = copyStyle(rSrc.style);\r\n    // eslint-disable-next-line no-loop-func\r\n    rSrc.eachCell({includeEmpty: styleEmpty}, (cell, colNumber) => {\r\n      rDst.getCell(colNumber).style = copyStyle(cell.style);\r\n    });\r\n    rDst.height = rSrc.height;\r\n  }\r\n\r\n  duplicateRow(rowNum, count, insert = false) {\r\n    // create count duplicates of rowNum\r\n    // either inserting new or overwriting existing rows\r\n\r\n    const rSrc = this._rows[rowNum - 1];\r\n    const inserts = new Array(count).fill(rSrc.values);\r\n    this.spliceRows(rowNum + 1, insert ? 0 : count, ...inserts);\r\n\r\n    // now copy styles...\r\n    for (let i = 0; i < count; i++) {\r\n      const rDst = this._rows[rowNum + i];\r\n      rDst.style = rSrc.style;\r\n      rDst.height = rSrc.height;\r\n      // eslint-disable-next-line no-loop-func\r\n      rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n        rDst.getCell(colNumber).style = cell.style;\r\n      });\r\n    }\r\n  }\r\n\r\n  spliceRows(start, count, ...inserts) {\r\n    // same problem as row.splice, except worse.\r\n    const nKeep = start + count;\r\n    const nInserts = inserts.length;\r\n    const nExpand = nInserts - count;\r\n    const nEnd = this._rows.length;\r\n    let i;\r\n    let rSrc;\r\n    if (nExpand < 0) {\r\n      // remove rows\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          rDst.height = rSrc.height;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n          this._rows[i - 1] = undefined;\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          rDst.height = rSrc.height;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n\r\n            // remerge cells accounting for insert offset\r\n            if (cell._value.constructor.name === 'MergeValue') {\r\n              const cellToBeMerged = this.getRow(cell._row._number + nInserts).getCell(colNumber);\r\n              const prevMaster = cell._value._master;\r\n              const newMaster = this.getRow(prevMaster._row._number + nInserts).getCell(prevMaster._column._number);\r\n              cellToBeMerged.merge(newMaster);\r\n            }\r\n          });\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now copy over the new values\r\n    for (i = 0; i < nInserts; i++) {\r\n      const rDst = this.getRow(start + i);\r\n      rDst.style = {};\r\n      rDst.values = inserts[i];\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceRows(this.name, start, count, nInserts);\r\n  }\r\n\r\n  // iterate over every row in the worksheet, including maybe empty rows\r\n  eachRow(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._rows.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(row => {\r\n        if (row && row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // return all rows as sparse array\r\n  getSheetValues() {\r\n    const rows = [];\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        rows[row.number] = row.values;\r\n      }\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this._rows[address.row - 1];\r\n    return row ? row.findCell(address.col) : undefined;\r\n  }\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this.getRow(address.row);\r\n    return row.getCellEx(address);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Merge\r\n\r\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\r\n  mergeCells(...cells) {\r\n    const dimensions = new Range(cells);\r\n    this._mergeCellsInternal(dimensions);\r\n  }\r\n\r\n  mergeCellsWithoutStyle(...cells) {\r\n    const dimensions = new Range(cells);\r\n    this._mergeCellsInternal(dimensions, true);\r\n  }\r\n\r\n  _mergeCellsInternal(dimensions, ignoreStyle) {\r\n    // check cells aren't already merged\r\n    _.each(this._merges, merge => {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge already merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    const master = this.getCell(dimensions.top, dimensions.left);\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        // merge all but the master cell\r\n        if (i > dimensions.top || j > dimensions.left) {\r\n          this.getCell(i, j).merge(master, ignoreStyle);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges[master.address] = dimensions;\r\n  }\r\n\r\n  _unMergeMaster(master) {\r\n    // master is always top left of a rectangle\r\n    const merge = this._merges[master.address];\r\n    if (merge) {\r\n      for (let i = merge.top; i <= merge.bottom; i++) {\r\n        for (let j = merge.left; j <= merge.right; j++) {\r\n          this.getCell(i, j).unmerge();\r\n        }\r\n      }\r\n      delete this._merges[master.address];\r\n    }\r\n  }\r\n\r\n  get hasMerges() {\r\n    // return true if this._merges has a merge object\r\n    return _.some(this._merges, Boolean);\r\n  }\r\n\r\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\r\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\r\n  // atomic - either they're all merged or all un-merged.\r\n  unMergeCells(...cells) {\r\n    const dimensions = new Range(cells);\r\n\r\n    // find any cells in that range and unmerge them\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        const cell = this.findCell(i, j);\r\n        if (cell) {\r\n          if (cell.type === Enums.ValueType.Merge) {\r\n            // this cell merges to another master\r\n            this._unMergeMaster(cell.master);\r\n          } else if (this._merges[cell.address]) {\r\n            // this cell is a master\r\n            this._unMergeMaster(cell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Shared/Array Formula\r\n  fillFormula(range, formula, results, shareType = 'shared') {\r\n    // Define formula for top-left cell and share to rest\r\n    const decoded = colCache.decode(range);\r\n    const {top, left, bottom, right} = decoded;\r\n    const width = right - left + 1;\r\n    const masterAddress = colCache.encodeAddress(top, left);\r\n    const isShared = shareType === 'shared';\r\n\r\n    // work out result accessor\r\n    let getResult;\r\n    if (typeof results === 'function') {\r\n      getResult = results;\r\n    } else if (Array.isArray(results)) {\r\n      if (Array.isArray(results[0])) {\r\n        getResult = (row, col) => results[row - top][col - left];\r\n      } else {\r\n        // eslint-disable-next-line no-mixed-operators\r\n        getResult = (row, col) => results[(row - top) * width + (col - left)];\r\n      }\r\n    } else {\r\n      getResult = () => undefined;\r\n    }\r\n    let first = true;\r\n    for (let r = top; r <= bottom; r++) {\r\n      for (let c = left; c <= right; c++) {\r\n        if (first) {\r\n          this.getCell(r, c).value = {\r\n            shareType,\r\n            formula,\r\n            ref: range,\r\n            result: getResult(r, c),\r\n          };\r\n          first = false;\r\n        } else {\r\n          this.getCell(r, c).value = isShared\r\n            ? {\r\n                sharedFormula: masterAddress,\r\n                result: getResult(r, c),\r\n              }\r\n            : getResult(r, c);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // =========================================================================\r\n  // Images\r\n  addImage(imageId, range) {\r\n    const model = {\r\n      type: 'image',\r\n      imageId,\r\n      range,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getImages() {\r\n    return this._media.filter(m => m.type === 'image');\r\n  }\r\n\r\n  addBackgroundImage(imageId) {\r\n    const model = {\r\n      type: 'background',\r\n      imageId,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getBackgroundImageId() {\r\n    const image = this._media.find(m => m.type === 'background');\r\n    return image && image.imageId;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Worksheet Protection\r\n  protect(password, options) {\r\n    // TODO: make this function truly async\r\n    // perhaps marshal to worker thread or something\r\n    return new Promise(resolve => {\r\n      this.sheetProtection = {\r\n        sheet: true,\r\n      };\r\n      if (options && 'spinCount' in options) {\r\n        // force spinCount to be integer >= 0\r\n        options.spinCount = Number.isFinite(options.spinCount) ? Math.round(Math.max(0, options.spinCount)) : 100000;\r\n      }\r\n      if (password) {\r\n        this.sheetProtection.algorithmName = 'SHA-512';\r\n        this.sheetProtection.saltValue = Encryptor.randomBytes(16).toString('base64');\r\n        this.sheetProtection.spinCount = options && 'spinCount' in options ? options.spinCount : 100000; // allow user specified spinCount\r\n        this.sheetProtection.hashValue = Encryptor.convertPasswordToHash(\r\n          password,\r\n          'SHA512',\r\n          this.sheetProtection.saltValue,\r\n          this.sheetProtection.spinCount\r\n        );\r\n      }\r\n      if (options) {\r\n        this.sheetProtection = Object.assign(this.sheetProtection, options);\r\n        if (!password && 'spinCount' in options) {\r\n          delete this.sheetProtection.spinCount;\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  unprotect() {\r\n    this.sheetProtection = null;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Tables\r\n  addTable(model) {\r\n    const table = new Table(this, model);\r\n    this.tables[model.name] = table;\r\n    return table;\r\n  }\r\n\r\n  getTable(name) {\r\n    return this.tables[name];\r\n  }\r\n\r\n  removeTable(name) {\r\n    delete this.tables[name];\r\n  }\r\n\r\n  getTables() {\r\n    return Object.values(this.tables);\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Conditional Formatting\r\n  addConditionalFormatting(cf) {\r\n    this.conditionalFormattings.push(cf);\r\n  }\r\n\r\n  removeConditionalFormatting(filter) {\r\n    if (typeof filter === 'number') {\r\n      this.conditionalFormattings.splice(filter, 1);\r\n    } else if (filter instanceof Function) {\r\n      this.conditionalFormattings = this.conditionalFormattings.filter(filter);\r\n    } else {\r\n      this.conditionalFormattings = [];\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Deprecated\r\n  get tabColor() {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    return this.properties.tabColor;\r\n  }\r\n\r\n  set tabColor(value) {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    this.properties.tabColor = value;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Model\r\n\r\n  get model() {\r\n    const model = {\r\n      id: this.id,\r\n      name: this.name,\r\n      dataValidations: this.dataValidations.model,\r\n      properties: this.properties,\r\n      state: this.state,\r\n      pageSetup: this.pageSetup,\r\n      headerFooter: this.headerFooter,\r\n      rowBreaks: this.rowBreaks,\r\n      views: this.views,\r\n      autoFilter: this.autoFilter,\r\n      media: this._media.map(medium => medium.model),\r\n      sheetProtection: this.sheetProtection,\r\n      tables: Object.values(this.tables).map(table => table.model),\r\n      conditionalFormattings: this.conditionalFormattings,\r\n    };\r\n\r\n    // =================================================\r\n    // columns\r\n    model.cols = Column.toModel(this.columns);\r\n\r\n    // ==========================================================\r\n    // Rows\r\n    const rows = (model.rows = []);\r\n    const dimensions = (model.dimensions = new Range());\r\n    this._rows.forEach(row => {\r\n      const rowModel = row && row.model;\r\n      if (rowModel) {\r\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\r\n        rows.push(rowModel);\r\n      }\r\n    });\r\n\r\n    // ==========================================================\r\n    // Merges\r\n    model.merges = [];\r\n    _.each(this._merges, merge => {\r\n      model.merges.push(merge.range);\r\n    });\r\n\r\n    return model;\r\n  }\r\n\r\n  _parseRows(model) {\r\n    this._rows = [];\r\n    model.rows.forEach(rowModel => {\r\n      const row = new Row(this, rowModel.number);\r\n      this._rows[row.number - 1] = row;\r\n      row.model = rowModel;\r\n    });\r\n  }\r\n\r\n  _parseMergeCells(model) {\r\n    _.each(model.mergeCells, merge => {\r\n      // Do not merge styles when importing an Excel file\r\n      // since each cell may have different styles intentionally.\r\n      this.mergeCellsWithoutStyle(merge);\r\n    });\r\n  }\r\n\r\n  set model(value) {\r\n    this.name = value.name;\r\n    this._columns = Column.fromModel(this, value.cols);\r\n    this._parseRows(value);\r\n\r\n    this._parseMergeCells(value);\r\n    this.dataValidations = new DataValidations(value.dataValidations);\r\n    this.properties = value.properties;\r\n    this.pageSetup = value.pageSetup;\r\n    this.headerFooter = value.headerFooter;\r\n    this.views = value.views;\r\n    this.autoFilter = value.autoFilter;\r\n    this._media = value.media.map(medium => new Image(this, medium));\r\n    this.sheetProtection = value.sheetProtection;\r\n    this.tables = value.tables.reduce((tables, table) => {\r\n      const t = new Table();\r\n      t.model = table;\r\n      tables[table.name] = t;\r\n      return tables;\r\n    }, {});\r\n    this.conditionalFormattings = value.conditionalFormattings;\r\n  }\r\n}\r\n\r\nmodule.exports = Worksheet;\r\n"],"file":"worksheet.js"}