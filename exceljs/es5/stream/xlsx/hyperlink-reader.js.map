{"version":3,"sources":["../../../../lib/stream/xlsx/hyperlink-reader.js"],"names":["require","EventEmitter","parseSax","Enums","RelType","HyperlinkReader","workbook","id","iterator","options","hyperlinks","length","fn","forEach","emitHyperlinks","emit","events","eventType","value","node","name","rId","attributes","Id","Type","Hyperlink","relationship","type","RelationshipType","Styles","target","Target","targetMode","TargetMode","module","exports"],"mappings":"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","sourcesContent":["const {EventEmitter} = require('events');\r\nconst parseSax = require('../../utils/parse-sax');\r\n\r\nconst Enums = require('../../doc/enums');\r\nconst RelType = require('../../xlsx/rel-type');\r\n\r\nclass HyperlinkReader extends EventEmitter {\r\n  constructor({workbook, id, iterator, options}) {\r\n    super();\r\n\r\n    this.workbook = workbook;\r\n    this.id = id;\r\n    this.iterator = iterator;\r\n    this.options = options;\r\n  }\r\n\r\n  get count() {\r\n    return (this.hyperlinks && this.hyperlinks.length) || 0;\r\n  }\r\n\r\n  each(fn) {\r\n    return this.hyperlinks.forEach(fn);\r\n  }\r\n\r\n  async read() {\r\n    const {iterator, options} = this;\r\n    let emitHyperlinks = false;\r\n    let hyperlinks = null;\r\n    switch (options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (!emitHyperlinks && !hyperlinks) {\r\n      this.emit('finished');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      for await (const events of parseSax(iterator)) {\r\n        for (const {eventType, value} of events) {\r\n          if (eventType === 'opentag') {\r\n            const node = value;\r\n            if (node.name === 'Relationship') {\r\n              const rId = node.attributes.Id;\r\n              switch (node.attributes.Type) {\r\n                case RelType.Hyperlink:\r\n                  {\r\n                    const relationship = {\r\n                      type: Enums.RelationshipType.Styles,\r\n                      rId,\r\n                      target: node.attributes.Target,\r\n                      targetMode: node.attributes.TargetMode,\r\n                    };\r\n                    if (emitHyperlinks) {\r\n                      this.emit('hyperlink', relationship);\r\n                    } else {\r\n                      hyperlinks[relationship.rId] = relationship;\r\n                    }\r\n                  }\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.emit('finished');\r\n    } catch (error) {\r\n      this.emit('error', error);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = HyperlinkReader;\r\n"],"file":"hyperlink-reader.js"}