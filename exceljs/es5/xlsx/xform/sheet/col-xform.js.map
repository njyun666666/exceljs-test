{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/col-xform.js"],"names":["utils","require","BaseXform","ColXform","model","options","styleId","styles","addStyleModel","style","xmlStream","openNode","addAttribute","min","max","width","hidden","bestFit","outlineLevel","collapsed","closeNode","node","name","parseInt","attributes","undefined","parseFloat","parseBoolean","getStyleModel","module","exports"],"mappings":"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","sourcesContent":["const utils = require('../../../utils/utils');\r\nconst BaseXform = require('../base-xform');\r\n\r\nclass ColXform extends BaseXform {\r\n  get tag() {\r\n    return 'col';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const styleId = options.styles.addStyleModel(model.style || {});\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('col');\r\n    xmlStream.addAttribute('min', model.min);\r\n    xmlStream.addAttribute('max', model.max);\r\n    if (model.width) {\r\n      xmlStream.addAttribute('width', model.width);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('style', model.styleId);\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden', '1');\r\n    }\r\n    if (model.bestFit) {\r\n      xmlStream.addAttribute('bestFit', '1');\r\n    }\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed', '1');\r\n    }\r\n    xmlStream.addAttribute('customWidth', '1');\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === 'col') {\r\n      const model = (this.model = {\r\n        min: parseInt(node.attributes.min || '0', 10),\r\n        max: parseInt(node.attributes.max || '0', 10),\r\n        width:\r\n          node.attributes.width === undefined\r\n            ? undefined\r\n            : parseFloat(node.attributes.width || '0'),\r\n      });\r\n      if (node.attributes.style) {\r\n        model.styleId = parseInt(node.attributes.style, 10);\r\n      }\r\n      if (utils.parseBoolean(node.attributes.hidden)) {\r\n        model.hidden = true;\r\n      }\r\n      if (utils.parseBoolean(node.attributes.bestFit)) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\r\n      }\r\n      if (utils.parseBoolean(node.attributes.collapsed)) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // reconcile column styles\r\n    if (model.styleId) {\r\n      model.style = options.styles.getStyleModel(model.styleId);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ColXform;\r\n"],"file":"col-xform.js"}