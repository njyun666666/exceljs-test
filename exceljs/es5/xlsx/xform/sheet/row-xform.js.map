{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/row-xform.js"],"names":["BaseXform","require","utils","CellXform","RowXform","options","maxItems","map","c","model","styleId","styles","addStyleModel","style","cellXform","cells","forEach","cellModel","prepare","xmlStream","openNode","addAttribute","number","height","hidden","min","max","outlineLevel","collapsed","render","closeNode","node","parser","parseOpen","name","numRowsSeen","spans","attributes","split","span","parseInt","undefined","r","s","parseBoolean","bestFit","ht","parseFloat","text","parseText","parseClose","push","length","Error","getStyleModel","reconcile","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\nconst utils = require('../../../utils/utils');\r\n\r\nconst CellXform = require('./cell-xform');\r\n\r\nclass RowXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.maxItems = options && options.maxItems;\r\n    this.map = {\r\n      c: new CellXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'row';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const styleId = options.styles.addStyleModel(model.style);\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n    const cellXform = this.map.c;\r\n    model.cells.forEach(cellModel => {\r\n      cellXform.prepare(cellModel, options);\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model, options) {\r\n    xmlStream.openNode('row');\r\n    xmlStream.addAttribute('r', model.number);\r\n    if (model.height) {\r\n      xmlStream.addAttribute('ht', model.height);\r\n      xmlStream.addAttribute('customHeight', '1');\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden', '1');\r\n    }\r\n    if (model.min > 0 && model.max > 0 && model.min <= model.max) {\r\n      xmlStream.addAttribute('spans', `${model.min}:${model.max}`);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('s', model.styleId);\r\n      xmlStream.addAttribute('customFormat', '1');\r\n    }\r\n    xmlStream.addAttribute('x14ac:dyDescent', '0.25');\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed', '1');\r\n    }\r\n\r\n    const cellXform = this.map.c;\r\n    model.cells.forEach(cellModel => {\r\n      cellXform.render(xmlStream, cellModel, options);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (node.name === 'row') {\r\n      this.numRowsSeen += 1;\r\n      const spans = node.attributes.spans\r\n        ? node.attributes.spans.split(':').map(span => parseInt(span, 10))\r\n        : [undefined, undefined];\r\n      const model = (this.model = {\r\n        number: parseInt(node.attributes.r, 10),\r\n        min: spans[0],\r\n        max: spans[1],\r\n        cells: [],\r\n      });\r\n      if (node.attributes.s) {\r\n        model.styleId = parseInt(node.attributes.s, 10);\r\n      }\r\n      if (utils.parseBoolean(node.attributes.hidden)) {\r\n        model.hidden = true;\r\n      }\r\n      if (utils.parseBoolean(node.attributes.bestFit)) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.ht) {\r\n        model.height = parseFloat(node.attributes.ht);\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\r\n      }\r\n      if (utils.parseBoolean(node.attributes.collapsed)) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    this.parser = this.map[node.name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.cells.push(this.parser.model);\r\n        if (this.maxItems && this.model.cells.length > this.maxItems) {\r\n          throw new Error(`Max column count (${this.maxItems}) exceeded`);\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    model.style = model.styleId ? options.styles.getStyleModel(model.styleId) : {};\r\n    if (model.styleId !== undefined) {\r\n      model.styleId = undefined;\r\n    }\r\n\r\n    const cellXform = this.map.c;\r\n    model.cells.forEach(cellModel => {\r\n      cellXform.reconcile(cellModel, options);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = RowXform;\r\n"],"file":"row-xform.js"}